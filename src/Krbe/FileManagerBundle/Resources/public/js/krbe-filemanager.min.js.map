{"version":3,"file":"krbe-filemanager.min.js","sources":["krbe-filemanager.js"],"sourcesContent":["Dropzone.autoDiscover = false;\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n    // Fonction pour recharger la liste des fichiers en fonction d'un sous-dossier\n    function loadFilesList(subFolder) {\n        // Construire l'URL de la route file_manager_widget_listfiles avec le paramètre subFolder\n        const url = krbeFilemanagerUrlWidgetListfiles + '/' + encodeURI(subFolder || '');\n        fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })\n            .then(response => response.text())\n            .then(html => {\n                // Remplacer le contenu de la section #files-list par le nouveau contenu\n                const filesListContainer = document.getElementById('files-list');\n                // ajout de la valeur subFolder dans l'attribut data-subfolder\n                filesListContainer.setAttribute('krbe-filemanager-currentfolder', subFolder);\n                filesListContainer.innerHTML = html;\n\n                updateNavigationCurrent(subFolder);\n            })\n            .catch(error => console.error(\"Erreur de chargement de la liste de fichiers :\", error));\n    }\n    function loadTree(current) {\n        fetch(krbeFilemanagerUrlWidgetListfolders, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })\n            .then(response => response.text())\n            .then(html => {\n                // Remplacer le contenu de la section #files-list par le nouveau contenu\n                const treeContainer = document.getElementById('directory-nav-tree');\n                treeContainer.innerHTML = html;\n                updateNavigationCurrent(current);\n            })\n            .catch(error => console.error(\"Erreur de chargement de l'arborescence :\", error));\n    }\n    function updateNavigationCurrent(currentSubFolder) {\n        // Suppression de toutes les classes \"current\"\n        document.querySelectorAll('[data-krbe-filemanager] li.current').forEach(function(li) {\n            li.classList.remove('current');\n        });\n        // Chercher l'élément <li> qui contient un lien avec data-krbe-filemanager-folder égal à currentSubFolder\n        const navLink = document.querySelector('[data-krbe-filemanager] a[data-krbe-filemanager-folder=\"' + currentSubFolder + '\"]');\n        if (navLink) {\n            // Ajout de la classe \"current\" sur le <li> parent\n            const li = navLink.closest('li');\n            if (li) {\n                li.classList.add('current');\n            }\n        }\n        // Mise à jour du champ subFolder dans le formulaire caché\n        const subFolderInput = document.querySelector('form#hidden-upload-form input[name=\"subFolder\"]');\n        if (subFolderInput) {\n            subFolderInput.value = currentSubFolder || '';\n        }\n    }\n    updateNavigationCurrent(subFolder);\n\n    // Utilisation de la délégation pour gérer le clic sur un dossier\n    document.body.addEventListener('click', function(e) {\n        console.log(\"Click body détecté, cible :\", e.target);\n        const link = e.target.closest('a[data-krbe-filemanager-folder]');\n        if (link) {\n            e.preventDefault();\n            const folder = link.getAttribute('data-krbe-filemanager-folder');\n            loadFilesList(folder);\n        }\n    });\n\n    // Initialiser Dropzone sur le formulaire caché\n    const hiddenUploadForm = new Dropzone(\"#hidden-upload-form\", {\n        autoProcessQueue: true,\n        paramName: 'file',\n        maxFilesize: 10,\n        init: function() {\n            this.on(\"success\", function(file, response) {\n                console.log('Fichier téléversé:', response.filePath);\n                const filesListContainer = document.getElementById('files-list');\n                var folder = filesListContainer.getAttribute('krbe-filemanager-currentfolder');\n                loadFilesList(folder);\n            });\n            this.on(\"error\", function(file, errorMessage) {\n                let message = translations.error_during_upload;\n                if (errorMessage && typeof errorMessage === 'object' && errorMessage.error) {\n                    message = errorMessage.error;\n                } else if (typeof errorMessage === 'string') {\n                    message = errorMessage;\n                }\n                alert(message);\n            });\n        }\n    });\n    // Définir la zone de drop sur le volet droit (files-list)\n    const folderContent = document.getElementById('folder-content');\n    const dropzoneOverlay = document.getElementById('dropzone-overlay');\n    let dragCounter = 0;\n    // Afficher l'overlay lorsque l'on glisse un fichier dans la zone de contenu\n    folderContent.addEventListener('dragenter', function(e) {\n        e.preventDefault();\n        dragCounter++;\n        dropzoneOverlay.style.display = 'flex';\n    });\n    folderContent.addEventListener('dragleave', function(e) {\n        e.preventDefault();\n        dragCounter--;\n        if (dragCounter <= 0) {\n            dropzoneOverlay.style.display = 'none';\n            dragCounter = 0;\n        }\n    });\n    folderContent.addEventListener('dragover', function(e) {\n        e.preventDefault();\n    });\n    folderContent.addEventListener('drop', function(e) {\n        e.preventDefault();\n        dropzoneOverlay.style.display = 'none';\n        dragCounter = 0;\n        const files = e.dataTransfer.files;\n        if (files.length > 0) {\n            for (let i = 0; i < files.length; i++) {\n                hiddenUploadForm.addFile(files[i]);\n            }\n        }\n    });\n\n    // Recherche\n    const searchField = document.getElementById('search');\n    if(searchField) {\n        console.log(\"Search field trouvé\");\n        searchField.addEventListener('keyup', function() {\n            console.log(\"Recherche déclenchée, valeur :\", this.value);\n            const query = this.value.toLowerCase();\n            document.querySelectorAll('.file-item, .folder-item').forEach(function(item) {\n                // Vérifier que chaque item contient bien un <p>\n                const p = item.querySelector('p');\n                if(p) {\n                    const filename = p.textContent.toLowerCase();\n                    item.style.display = filename.includes(query) ? '' : 'none';\n                } else {\n                    console.warn(\"L'élément n'a pas de <p> :\", item);\n                }\n            });\n        });\n    } else {\n        console.error(\"Champ de recherche introuvable\");\n    }\n\n    // Toggle view\n    const toggleButton = document.getElementById('toggle-view');\n    if(toggleButton) {\n        console.log(\"Bouton toggle view trouvé\");\n        toggleButton.addEventListener('click', function() {\n            const filesList = document.getElementById('files-list');\n            if(filesList) {\n                console.log(\"Toggle view sur files-list\");\n                filesList.classList.toggle('list-view');\n            }\n        });\n    } else {\n        console.error(\"Bouton toggle view introuvable\");\n    }\n\n    // Bouton d'importation déclenche l'ouverture du sélecteur de fichiers\n    document.getElementById('import-btn').addEventListener('click', function() {\n        hiddenUploadForm.hiddenFileInput.click();\n    });\n\n    //Bouton création de dossier\n    document.getElementById('create-folder-btn').addEventListener('click', function () {\n        const folderName = prompt(translations.new_folder_name);\n\n        if (!folderName || folderName.trim() === \"\") {\n            alert(translations.invalid_folder_name);\n            return;\n        }\n\n        // Vérifier le dossier courant\n        const filesListContainer = document.getElementById('files-list');\n        const currentFolder = filesListContainer.getAttribute('krbe-filemanager-currentfolder') || '';\n\n        fetch(krbeFilemanagerUrlFctCreateFolder, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify({ folderName: folderName.trim(), currentFolder: currentFolder })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.folderPath) {\n                    alert(translations.folder_created);\n                    loadFilesList(data.folderPath); // Recharger la liste des fichiers\n                    loadTree(data.folderPath.slice(1)); // Recharger l'arborescence\n                } else {\n                    alert(translations.folder_create_error + (data.error || \"\"));\n                }\n            })\n            .catch(error => {\n                console.error(\"Erreur lors de la création du dossier :\", error);\n                alert(translations.folder_create_error_generic);\n            });\n    });\n\n    // Gestion de CropperJS via le bouton \"Crop\"\n    let cropper;\n    const cropModal = document.getElementById('crop-modal');\n    const cropImage = document.getElementById('crop-image');\n    const widthInput = document.getElementById('crop-width');\n    const heightInput = document.getElementById('crop-height');\n    const applyDimensionsButton = document.getElementById('apply-dimensions');\n    // Appliquer les dimensions indiquées par l'utilisateur\n    applyDimensionsButton.addEventListener('click', function() {\n        const newWidth = parseInt(widthInput.value);\n        const newHeight = parseInt(heightInput.value);\n        if (!isNaN(newWidth) && !isNaN(newHeight)) {\n            cropper.setCropBoxData({ width: newWidth, height: newHeight });\n        } else {\n            alert(translations.invalid_dimensions);\n        }\n    });\n    // Confirmer le crop\n    document.getElementById('crop-confirm').addEventListener('click', function() {\n        const croppedCanvas = cropper.getCroppedCanvas();\n        croppedCanvas.toBlob(function(blob) {\n            const formData = new FormData();\n            formData.append('relativeFilePath', cropImage.dataset.relativePath);\n            formData.append('x', cropper.getData().x);\n            formData.append('y', cropper.getData().y);\n            formData.append('width', cropper.getData().width);\n            formData.append('height', cropper.getData().height);\n            // Transmettre le sous-dossier si nécessaire\n            formData.append('subFolder', \"{{ currentFolder }}\");\n            fetch(krbeFilemanagerUrlFctCrop, {\n                method: 'POST',\n                body: formData\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.relativeFilePath) {\n                        alert(translations.image_cropped_successfully);\n                        const filesListContainer = document.getElementById('files-list');\n                        var folder = filesListContainer.getAttribute('krbe-filemanager-currentfolder');\n                        loadFilesList(folder);\n                        // Fermer la modale de crop\n                        cropModal.style.display = 'none';\n                        if(cropper) {\n                            cropper.destroy();\n                        }\n                    } else {\n                        alert(translations.error_during_cropping);\n                    }\n                });\n        });\n    });\n    document.getElementById('crop-cancel').addEventListener('click', function() {\n        cropModal.style.display = 'none';\n        if(cropper) {\n            cropper.destroy();\n        }\n    });\n\n    // MOVE\n    const moveModal = document.getElementById('move-modal');\n    // MOVE: Attacher un événement aux liens de l'arborescence dans la modale\n    document.querySelectorAll('.move-select').forEach(function(link) {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            // Marquer le dossier sélectionné\n            document.querySelectorAll('.move-directory-tree li').forEach(li => li.classList.remove('selected'));\n            this.parentElement.classList.add('selected');\n        });\n    });\n    // MOVE: Lorsque l'utilisateur confirme le déplacement\n    document.getElementById('move-confirm').addEventListener('click', function() {\n        console.log('move confirm');\n        // Récupérer le chemin du dossier sélectionné\n        const selectedLi = document.querySelector('.move-directory-tree li.selected');\n        if (!selectedLi) {\n            alert(translations.select_destination_folder);\n            return;\n        }\n        const destinationSubFolder = selectedLi.getAttribute('data-path');\n        // Envoyer la requête AJAX pour déplacer le fichier\n        fetch(krbeFilemanagerUrlFctMove, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify({ relativePath: relativePath, destinationSubFolder: destinationSubFolder })\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.newFilePath) {\n                    alert(translations.move_successful);\n                    const filesListContainer = document.getElementById('files-list');\n                    var folder = filesListContainer.getAttribute('krbe-filemanager-currentfolder');\n                    loadFilesList(folder);\n\n                    moveModal.style.display = 'none';\n                } else {\n                    alert(translations.error_during_move + (data.error || \"\"));\n                }\n            })\n            .catch(error => {\n                console.error(\"Erreur:\", error);\n                alert(translations.error_during_move);\n            });\n    });\n    // MOVE: Annulation\n    document.getElementById('move-cancel').addEventListener('click', function() {\n        moveModal.style.display = 'none';\n    });\n\n    // item action\n    let relativePath = \"\";\n    let publicPath = \"\";\n    let currentName = \"\";\n    document.getElementById('files-list').addEventListener('click', function(e) {\n        // On récupère l'élément bouton le plus proche du clic\n        const button = e.target.closest('button');\n        if (!button) return; // Si ce n'est pas un bouton, on quitte\n\n        const article = button.closest('article');\n        relativePath = article.getAttribute('data-file');\n        publicPath = article.getAttribute('data-public');\n        currentName = article.getAttribute('data-name');\n\n        if (button.classList.contains('select-btn')) {\n            console.log(\"Selectionner cliqué pour :\", relativePath);\n            // Appeler le callback global pour transmettre le chemin sélectionné\n            if (window.fileManagerSelectCallback) {\n                window.fileManagerSelectCallback(relativePath);\n            }\n        } else if (button.classList.contains('rename-btn')) {\n            console.log(\"Renommer cliqué pour :\", relativePath);\n            const newName = prompt(translations.enter_new_name, currentName);\n            if (newName && newName !== currentName) {\n                fetch(krbeFilemanagerUrlFctRename, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-Requested-With': 'XMLHttpRequest'\n                    },\n                    body: JSON.stringify({ relativePath: relativePath, newName: newName })\n                })\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.newPath) {\n                            alert(translations.renamed_successfully);\n                            const filesListContainer = document.getElementById('files-list');\n                            var folder = filesListContainer.getAttribute('krbe-filemanager-currentfolder');\n                            loadFilesList(folder);\n                        } else {\n                            alert(translations.error_during_renaming + (data.error || \"\"));\n                        }\n                    })\n                    .catch(error => {\n                        console.error(\"Erreur :\", error);\n                        alert(translations.error_during_renaming);\n                    });\n            }\n        } else if (button.classList.contains('delete-btn')) {\n            console.log(\"Supprimer cliqué pour :\", relativePath);\n            if (confirm(translations.confirm_delete)) {\n                fetch(krbeFilemanagerUrlFctDelete, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-Requested-With': 'XMLHttpRequest'\n                    },\n                    body: JSON.stringify({ relativePath: relativePath })\n                })\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.success) {\n                            alert(translations.deleted_successfully);\n                            const filesListContainer = document.getElementById('files-list');\n                            var folder = filesListContainer.getAttribute('krbe-filemanager-currentfolder');\n                            loadFilesList(folder);\n                        } else {\n                            alert(translations.error_during_deletion);\n                        }\n                    })\n                    .catch(error => {\n                        console.error(\"Erreur :\", error);\n                        alert(translations.error_during_deletion);\n                    });\n            }\n        } else if (button.classList.contains('move-btn')) {\n            console.log(\"Déplacer cliqué pour :\", relativePath);\n            // Code pour déplacer...\n\n            // Ouvrir la modale de déplacement\n            moveModal.style.display = 'flex';\n\n            // Optionnel : vider une sélection précédente\n            document.querySelectorAll('.move-directory-tree li').forEach(li => {\n                li.classList.remove('selected');\n            });\n\n        } else if (button.classList.contains('crop-btn')) {\n            console.log(\"Crop cliqué pour :\", relativePath);\n            cropImage.src = publicPath;\n            cropImage.dataset.relativePath = relativePath;\n            cropModal.style.display = 'flex';\n            cropper = new Cropper(cropImage, { aspectRatio: NaN });\n            // Initialiser les champs de dimensions avec la taille actuelle du crop box\n            const cropBoxData = cropper.getCropBoxData();\n            widthInput.value = Math.round(cropBoxData.width);\n            heightInput.value = Math.round(cropBoxData.height);\n        }\n    });\n\n    // Gérer la sélection de fichier en mode picker\n    document.addEventListener('click', function(e) {\n        if (e.target && e.target.classList.contains('select-btn')) {\n            const fileItem = e.target.closest('.file-item');\n            if (fileItem) {\n                const filePath = fileItem.dataset.file;\n                const publicPath = fileItem.dataset.public;\n                \n                // Envoyer un message au parent\n                window.parent.postMessage({\n                    type: 'filemanager:select',\n                    filePath: filePath,\n                    publicPath: publicPath\n                }, '*');\n            }\n        }\n    });\n\n    // Gérer le double-clic sur les fichiers\n    document.getElementById('files-list').addEventListener('dblclick', function(e) {\n        const fileItem = e.target.closest('.file-item');\n        if (fileItem) {\n            const filePath = fileItem.dataset.file;\n            const publicPath = fileItem.dataset.public;\n            \n            // Envoyer un message au parent\n            window.parent.postMessage({\n                type: 'filemanager:select',\n                filePath: filePath,\n                publicPath: publicPath\n            }, '*');\n        }\n    });\n\n    // Gestion du double tap\n    let lastTap = 0;\n    let lastTapTarget = null;\n\n    document.addEventListener('touchend', function(e) {\n        const currentTime = new Date().getTime();\n        const tapLength = currentTime - lastTap;\n        const fileItem = e.target.closest('.file-item');\n        \n        if (tapLength < 500 && tapLength > 0 && fileItem === lastTapTarget) {\n            // Double tap détecté\n            e.preventDefault();\n            const filePath = fileItem.dataset.file;\n            const publicPath = fileItem.dataset.public;\n            \n            // Envoyer un message au parent\n            window.parent.postMessage({\n                type: 'filemanager:select',\n                filePath: filePath,\n                publicPath: publicPath\n            }, '*');\n            \n            // Réinitialiser le compteur\n            lastTap = 0;\n            lastTapTarget = null;\n        } else {\n            // Premier tap\n            lastTap = currentTime;\n            lastTapTarget = fileItem;\n        }\n    });\n\n    // Gérer le tap sur le bouton de sélection\n    document.addEventListener('touchend', function(e) {\n        if (e.target && e.target.classList.contains('select-btn')) {\n            e.preventDefault(); // Empêcher le double-tap\n            const fileItem = e.target.closest('.file-item');\n            if (fileItem) {\n                const filePath = fileItem.dataset.file;\n                const publicPath = fileItem.dataset.public;\n                \n                // Envoyer un message au parent\n                window.parent.postMessage({\n                    type: 'filemanager:select',\n                    filePath: filePath,\n                    publicPath: publicPath\n                }, '*');\n            }\n        }\n    });\n\n});"],"names":["Dropzone","autoDiscover","document","addEventListener","loadFilesList","subFolder","url","krbeFilemanagerUrlWidgetListfiles","encodeURI","fetch","headers","X-Requested-With","then","response","text","html","filesListContainer","getElementById","setAttribute","innerHTML","updateNavigationCurrent","catch","error","console","currentSubFolder","querySelectorAll","forEach","li","classList","remove","navLink","querySelector","subFolderInput","closest","add","value","body","e","log","target","link","preventDefault","getAttribute","hiddenUploadForm","autoProcessQueue","paramName","maxFilesize","init","this","on","file","filePath","errorMessage","let","message","translations","error_during_upload","alert","folderContent","dropzoneOverlay","dragCounter","style","display","files","dataTransfer","length","i","addFile","searchField","query","toLowerCase","item","p","filename","textContent","includes","warn","toggleButton","filesList","toggle","hiddenFileInput","click","currentFolder","folderName","prompt","new_folder_name","trim","krbeFilemanagerUrlFctCreateFolder","method","Content-Type","JSON","stringify","json","data","current","folderPath","folder_created","slice","krbeFilemanagerUrlWidgetListfolders","folder_create_error","folder_create_error_generic","invalid_folder_name","cropper","cropModal","cropImage","widthInput","heightInput","moveModal","newWidth","parseInt","newHeight","isNaN","invalid_dimensions","setCropBoxData","width","height","getCroppedCanvas","toBlob","blob","formData","FormData","append","dataset","relativePath","getData","x","y","krbeFilemanagerUrlFctCrop","relativeFilePath","image_cropped_successfully","destroy","error_during_cropping","parentElement","selectedLi","destinationSubFolder","krbeFilemanagerUrlFctMove","newFilePath","move_successful","error_during_move","select_destination_folder","publicPath","currentName","lastTap","cropBoxData","button","article","contains","window","fileManagerSelectCallback","newName","enter_new_name","krbeFilemanagerUrlFctRename","newPath","renamed_successfully","error_during_renaming","confirm","confirm_delete","krbeFilemanagerUrlFctDelete","success","deleted_successfully","error_during_deletion","src","Cropper","aspectRatio","NaN","getCropBoxData","Math","round","fileItem","public","parent","postMessage","type","lastTapTarget","currentTime","Date","getTime","tapLength"],"mappings":"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"}